<!DOCTYPE html>
<html>
<!--
Copyright 2009 Google Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<head>
  <title>Google Earth API Samples - Line String Styling</title>
  <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
  <!-- You should probably remove most of this extra cruft if you're copying
       this sample! -->
  <style type="text/css">@import "static/examples.css";</style>
  <style type="text/css">@import "static/prettify/prettify.css";</style>
  <script type="text/javascript" src="static/prettify/prettify.js"></script>
  
  <!-- Change the key below to your own Maps API key -->
  <script type="text/javascript" src="http://www.google.com/jsapi?hl=en&amp;key=ABQIAAAAwbkbZLyhsmTCWXbTcjbgbRSzHs7K5SvaUdm8ua-Xxy_-2dYwMxQMhnagaawTo7L1FE1-amhuQxIlXw"></script>
  <script type="text/javascript">
  /* <![CDATA[ */
  var ge;
  var lineStringPlacemark;
  
  google.load("earth", "1");

  function init() {
    google.earth.createInstance('map3d', initCB, failureCB);
  }
  
  function initCB(instance) {
    ge = instance;
    ge.getWindow().setVisibility(true);
    
    // add a navigation control
    ge.getNavigationControl().setVisibility(ge.VISIBILITY_AUTO);
    
    // add some layers
    ge.getLayerRoot().enableLayerById(ge.LAYER_BORDERS, true);
    ge.getLayerRoot().enableLayerById(ge.LAYER_ROADS, true);

    function addToLineString(lineString, lat, lng, latOffset, lngOffset) {
      var altitude = 1.0; // give it some altitude
      lineString.getCoordinates().
        pushLatLngAlt(lat + latOffset, lng + lngOffset, altitude);
    }
    
    var lookAt = ge.getView().copyAsLookAt(ge.ALTITUDE_RELATIVE_TO_GROUND);
    var lat = lookAt.getLatitude();
    var lng = lookAt.getLongitude();
    
    lineStringPlacemark = ge.createPlacemark('');
    var lineString = ge.createLineString('');
    lineStringPlacemark.setGeometry(lineString);
    lineString.setTessellate(true);
    
    // add the the points to the line string geometry
    addToLineString(lineString, lat, lng,   0,   0, 0);
    addToLineString(lineString, lat, lng, 1.5,  .5, 0);
    addToLineString(lineString, lat, lng,   0, 1.0, 0);
    addToLineString(lineString, lat, lng, 1.5, 1.5, 0);
    addToLineString(lineString, lat, lng,   0, 2.0, 0);
    addToLineString(lineString, lat, lng, 1.5, 2.5, 0);
    addToLineString(lineString, lat, lng,   0, 3.0, 0);
    addToLineString(lineString, lat, lng, 1.5, 3.5, 0);
    addToLineString(lineString, lat, lng,   0, 4.0, 0);
    addToLineString(lineString, lat, lng, 1.5, 4.5, 0);
    
    ge.getFeatures().appendChild(lineStringPlacemark);
    
    // zoom in to the linestring we created
    lookAt.setRange(1000000);
    ge.getView().setAbstractView(lookAt);
    
    
    document.getElementById('installed-plugin-version').innerHTML =
      ge.getPluginVersion().toString();
  }
  
  function failureCB(errorCode) {
  }
  
  function buttonClick() {
    // If lineStringPlacemark doesn't already have a Style associated
    // with it, we create it now.
    if (!lineStringPlacemark.getStyleSelector()) {
      lineStringPlacemark.setStyleSelector(ge.createStyle(''));
    }
  
    // The Style of a Feature is retrieved as feature.getStyleSelector().
    // The Style itself contains a LineStyle, which is what we manipulate
    // to change the color and width of the line.
    var lineStyle = lineStringPlacemark.getStyleSelector().getLineStyle();
    lineStyle.setWidth(lineStyle.getWidth() + 2);
    lineStyle.getColor().set('6600ffff');  // aabbggrr format
  }
  
  /* ]]> */
  </script>
</head>
<body onload="if(window.prettyPrint)prettyPrint();init();">
  <h1>Google Earth API Samples - Line String Styling</h1>
  <dl>
            <dt>Last Modified:</dt><dd>06/08/2009</dd>
    <dt>Installed Plugin Version:</dt><dd id="installed-plugin-version">...</dd>
  </dl>
  <div style="clear: both;"></div>
  
  <div id="ui" style="position: relative;">
    <div id="map3d" style="border: 1px solid silver; width: 500px; height: 500px;"></div>

    <div id="extra-ui" style="position: absolute; left: 520px; top: 0;">
      <input type="button" onclick="buttonClick()" value="Stylize the LineString!"/>
      
      <h2>Relevant Resources:</h2>
      <ul>
<li><a href="http://code.google.com/apis/earth/documentation/reference/interface_kml_style.html">KmlStyle Reference</a></li>
<li><a href="http://code.google.com/apis/earth/documentation/reference/interface_kml_line_style.html">KmlLineStyle Reference</a></li>
<li><a href="http://code.google.com/apis/earth/documentation/reference/interface_kml_color.html">KmlColor Reference</a></li>
<a id="playground-button" href="http://code.google.com/apis/ajax/playground/?exp=earth#line_string_styling"><img src="static/playground-button.png"/></a>      </ul>
      <h2>Relevant Code Excerpt:</h2>      <pre class="prettyprint lang-js">// If lineStringPlacemark doesn't already have a Style associated
// with it, we create it now.
if (!lineStringPlacemark.getStyleSelector()) {
  lineStringPlacemark.setStyleSelector(ge.createStyle(''));
}

// The Style of a Feature is retrieved as feature.getStyleSelector().
// The Style itself contains a LineStyle, which is what we manipulate
// to change the color and width of the line.
var lineStyle = lineStringPlacemark.getStyleSelector().getLineStyle();
lineStyle.setWidth(lineStyle.getWidth() + 2);
lineStyle.getColor().set('6600ffff');  // aabbggrr format</pre>    </div>
  </div>
</body>
</html>
